软件端报告

我们的开发平台为windows下的android studio。我们开发了两款app，用户使用其中的一个app"AE86"来操纵手机，同时"AE86"的界面上会出现由另一个app"driver"回传的实时画面。在操作时app"driver"被固定在小车上。app"AE86"通过蓝牙和小车上的蓝牙模块进行通信，关于小车的蓝牙模块的介绍，请参考硬件部分。

"AE86":
用户可以通过"AE86"用四种方式通过蓝牙控制小车，分别为按键控制，语音控制，重力控制以及手势控制。在"AE86"这个app上，我们设计的布局为，通过四个按键来切换用户的4种控制方式，每一种方式都有自己的布局。另外，我们还在布局上显示了由"driver"传来的实时画面，所以一共有5个布局。
【ae86_initialize】
然后通过重写activity的onCreate函数，进行"AE86"的初始化。初始化内容包括对应于4种控制方式的4个按键的加载，蓝牙的启动以及做好接收回传视频的准备。
【ae86_onCreate】
我们通过定义函数initViews来加载按键，下图为按键控制布局加载的代码展示，另外3种方法的实现效果类似。首先读取并加载xml定义的布局，然后再绑定按键事件。即，实例化一个keyControlFragment类，然后用FragmentTransaction类替换掉content的layout。
【ae86_initViews】
我们将蓝牙的连接封装在了函数startBluetooth中，具体实现方法参考了andriod官方的api文档，url地址为http://android.xsoftlab.net/guide/topics/connectivity/bluetooth.html
此外我们将蓝牙的传送借口进行封装成类Sender，用于蓝牙信息的传输。
【ae86_startBluetooth】
最后，我们用initViews中类似的方法，加载了视频传输的布局。
【ae86_initCamera】
最后定义四种方式的蓝牙接口，至此mainActivity的任务完成。
【ae86_port】

在keyControlFragment中，通过定义5个方向键，并定义按键事件为发送相应的字符给单片机，实现小车的前进，停止，后退，左转，右转。
【key】
最后定义接口类OnButtonClickedListener_Control，并重写onAttach，通过实例化activity为OnButtonClickedListener_Control对象，完成与mainActivity的关联。
【key_interface】

在语音控制的部分，我们使用了讯飞的android API包，并且参考了讯飞的使用文档。参考url:http://blog.csdn.net/zhoumushui/article/details/45293827
在VoiceControlFragment中首先用类似的方法完成布局和讯飞服务的初始化，定义按键为语音控制的参数初始化，包括引擎和码率。
【voice_init】
然后再定义讯飞的监听器，重写其中的函数，简单地通过匹配识别出来的字符串，来发送相应的字符到蓝牙。
【voice_listen】
最后类似地，通过定义接口类，完成与mainActivity的关联。
【voice_interface】

在GravityControlFragment中，首先完成布局的初始化，然后获得加速度传感器的权限，并定义listener。通过获取手机的倾斜角度，通过5个条件分类，在listener中发送相应字符到蓝牙。
【grav_init】
最后定义接口类，并注意在fragment的生命周期结束时，释放我们对加速传感器的申请。
【grav_interface】

在GestureControlFragment中，首先完成布局的初始化，然后在listener中，通过两个MotionEvent对应我们触碰到屏幕和从屏幕上移开两个事件。我们记录接触屏幕和离开屏幕的两次的点的相对位置，定义5个条件对应5个小车的行为。
【gesture_init】
接口定义
【gesture_interface】

CameraFragment中，先初始化了布局，然后新建了句柄handler用来显示图片，并在最后新建了实例化图片的线程类receiveThread类为receivethread。
【camera_init】
receiveThread类中，定义并使用8888作为端口号。然后用while(true)通过InputStream实例，不断从buffer中读取当前buffer中的全部内容，然后放到data中。然后新建一个setImageThread类的实例来处理data中存放的图像信息。
【camera_receive】
setImageThread类中，将data中的数据还原成图像。
【camera_setImage】




"driver":
将应用设置为常亮，无标题和全屏，这样就不会因为应用长时间没有用户交互而被系统后台kill掉。另外定义了两个按键，用来维护一个boolean变量flag，用来控制视频传输与否。
【driver_init】
增加菜单栏，其中包括"系统设置"和"退出"两个选项。对于前者会加载setting的xml，而对于后者则会让系统kill掉自己。
【driver_option】
如果flag不为0，那么每次计数器到设置的刷新率videoRate时就将图片发送出去。将拍摄得到的YUV以指定videoRate，（videoRate越高，最后的图像质量越好）转换为jpg格式后放到ByteArrayOutputStreaout的一个实例outputStream中，然后再通过sendThread(outputStream,name,IP,serverPort)发送到"AE86"上。
【driver_flush】
sendThread的实现步骤如下：先与指定ip的设备的指定端口进行套接字连接，然后根据套接字对象socket建立输出流out。每一个线程都会努力将当前buffer中的所有数据输出到out。注意此时outputStream也在不断接受图片数据，sendThread会在某个outputStream中的数据为空时停止，否则将outputStream中的数据放到buffer中，准备下一次循环时，将buffer中的数据发送到指定ip和端口。
【driver_send1】
【driver_send2】
最后通过重写onStart来设置name，IP，videoRate，videoQuality的default值，当然可以通过setting中改写。另外在driver的mainActivity开始前申请了对于摄像机的权利，对应地，在生命周期结束前释放权利。
【driver_life】
